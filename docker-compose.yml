version: '3.8'
services:  
  nginx-proxy:
    image: nginx:latest
    container_name: nginxproxy
    volumes:
      - ./nginx-proxy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      # - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx-proxy/index.html:/usr/share/nginx/html/index.html:ro
    ports:
      - "80:80"
    depends_on:
      - api-iot-spring-boot
      - front-end-react
    networks:
      - app_network

  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
    - app_network
    environment:
      MONGO_HOST: mongo # Use the service name 'mongo' to connect within the same network
      MONGO_PORT: 27017
  
  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: iot_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
  
  api-iot-spring-boot:
    build: ./api-iot-spring-boot/
    image: api-iot-spring-boot
    container_name: apispring
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/iot_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 12345678
    depends_on:
      - postgres
    networks:
      - app_network
    
  api-iot-express:
    build: ./api-iot-express/
    image: api-iot-express
    container_name: apiexpress
    ports:
      - "3001:3001"
    depends_on:
      - mongo
    networks:
      - app_network

  front-end-react:
    build: ./front-end-react/
    image: front-end-react
    container_name: frontendreact
    ports:
      - "3000:3000"
    depends_on:
      - api-iot-spring-boot
      - api-iot-express
    networks:
      - app_network
  
volumes:
  mongo-data:
  postgres-data:


networks:
  app_network:
    driver: bridge